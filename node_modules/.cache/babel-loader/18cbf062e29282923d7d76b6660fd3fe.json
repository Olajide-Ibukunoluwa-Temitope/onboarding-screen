{"ast":null,"code":"var _jsxFileName = \"/Users/temi/Documents/Dev/web/patronise-onboarding/src/pages/Onboarding.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport OnboardingFrame from '../components/view/OnboardingFrame';\nimport StepOne from '../components/view/Form/StepOne';\nimport StepTwo from '../components/view/Form/StepTwo';\nimport StepThree from '../components/view/Form/StepThree';\nimport { formSteps } from '../constants/stepper';\nimport { Formik, Form } from 'formik';\nimport { bvnSchema, personalAcctNumSchema, socialHandleSchema, businessCatSchema } from '../helpers/validation/schema'; // main onboarding component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Onboarding = () => {\n  _s();\n\n  const [activeStep, setActiveStep] = useState(1);\n  const [completedSteps, setCompletedSteps] = useState([]);\n  const [radioInputData, setRadioInputData] = useState({\n    verificationMethod: 'BVN',\n    usesPos: 'Yes'\n  }); // handle input change for custom radio input type\n\n  const handleRadioInputChange = event => {\n    switch (activeStep) {\n      case 1:\n        setRadioInputData({ ...radioInputData,\n          verificationMethod: event.target.textContent\n        });\n        break;\n\n      case 3:\n        setRadioInputData({ ...radioInputData,\n          usesPos: event.target.textContent\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    ;\n  }; // handle what form to display depending on the step user is on\n\n\n  const handleDisplayForm = currentStep => {\n    switch (currentStep) {\n      case 1:\n        return /*#__PURE__*/_jsxDEV(StepOne, {\n          handleRadioInputChange: handleRadioInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 24\n        }, this);\n\n      case 2:\n        return /*#__PURE__*/_jsxDEV(StepTwo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 24\n        }, this);\n\n      case 3:\n        return /*#__PURE__*/_jsxDEV(StepThree, {\n          handleRadioInputChange: handleRadioInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 24\n        }, this);\n\n      default:\n        return /*#__PURE__*/_jsxDEV(StepOne, {\n          handleRadioInputChange: handleRadioInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 24\n        }, this);\n    }\n  }; // handle continue button behaviour\n\n\n  const handleContinue = (values, actions) => {\n    if (activeStep !== formSteps.length) {\n      setActiveStep(activeStep + 1);\n      setCompletedSteps([...completedSteps, activeStep]);\n      actions.setTouched({}); // }\n    } else {\n      const finalData = { ...values,\n        ...radioInputData,\n        abegHandle: values.abegHandle[0] === '@' ? values.abegHandle : '@' + values.abegHandle,\n        instagramHandle: values.instagramHandle[0] === '@' ? values.instagramHandle : '@' + values.instagramHandle,\n        twitterHandle: values.twitterHandle[0] === '@' ? values.twitterHandle : '@' + values.twitterHandle\n      };\n      console.log(finalData);\n      alert(JSON.stringify(finalData));\n    }\n  }; // handle switching to the appropriate schema to be used for validation depending on the step user is on\n\n\n  const selectValidationSchema = () => {\n    const validationArr = [{\n      bvn: bvnSchema,\n      acctnum: personalAcctNumSchema\n    }, socialHandleSchema, businessCatSchema];\n    const position = activeStep - 1;\n\n    switch (activeStep) {\n      case 1:\n        if (radioInputData.verificationMethod === 'BVN') {\n          return validationArr[position].bvn;\n        } else {\n          return validationArr[position].acctnum;\n        }\n\n      default:\n        return validationArr[position];\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        bvn: '',\n        acctNum: '',\n        bank: '',\n        abegHandle: '',\n        instagramHandle: '',\n        twitterHandle: '',\n        businessType: '',\n        businessCategory: ''\n      },\n      validationSchema: selectValidationSchema(),\n      onSubmit: handleContinue,\n      children: ({\n        handleSubmit\n      }) => {\n        return /*#__PURE__*/_jsxDEV(OnboardingFrame, {\n          activeStep: activeStep,\n          changeActiveStep: setActiveStep,\n          completedSteps: completedSteps,\n          setCompletedSteps: setCompletedSteps,\n          steps: formSteps,\n          handleComplete: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: handleDisplayForm(activeStep)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Onboarding, \"1qBJ53663s68SxwQVdo/AP8+j68=\");\n\n_c = Onboarding;\nexport default Onboarding;\n\nvar _c;\n\n$RefreshReg$(_c, \"Onboarding\");","map":{"version":3,"sources":["/Users/temi/Documents/Dev/web/patronise-onboarding/src/pages/Onboarding.jsx"],"names":["React","useState","OnboardingFrame","StepOne","StepTwo","StepThree","formSteps","Formik","Form","bvnSchema","personalAcctNumSchema","socialHandleSchema","businessCatSchema","Onboarding","activeStep","setActiveStep","completedSteps","setCompletedSteps","radioInputData","setRadioInputData","verificationMethod","usesPos","handleRadioInputChange","event","target","textContent","handleDisplayForm","currentStep","handleContinue","values","actions","length","setTouched","finalData","abegHandle","instagramHandle","twitterHandle","console","log","alert","JSON","stringify","selectValidationSchema","validationArr","bvn","acctnum","position","acctNum","bank","businessType","businessCategory","handleSubmit"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport OnboardingFrame from '../components/view/OnboardingFrame';\nimport StepOne from '../components/view/Form/StepOne';\nimport StepTwo from '../components/view/Form/StepTwo';\nimport StepThree from '../components/view/Form/StepThree';\nimport { formSteps } from '../constants/stepper';\nimport { Formik, Form } from 'formik';\nimport { bvnSchema, personalAcctNumSchema, socialHandleSchema, businessCatSchema } from '../helpers/validation/schema';\n\n// main onboarding component\nconst Onboarding = () => {\n    const [activeStep, setActiveStep] = useState(1);\n    const [completedSteps, setCompletedSteps] = useState([]);\n    const [radioInputData, setRadioInputData] = useState({\n        verificationMethod: 'BVN',\n        usesPos: 'Yes',\n    });\n\n    // handle input change for custom radio input type\n    const handleRadioInputChange = (event) => {\n        switch (activeStep) {\n            case 1:\n                setRadioInputData({\n                    ...radioInputData,\n                    verificationMethod: event.target.textContent\n                })\n                break;\n            case 3:\n                setRadioInputData({\n                    ...radioInputData,\n                    usesPos: event.target.textContent\n                });\n                \n                break;\n        \n            default:\n                break;\n        };\n    };\n\n    // handle what form to display depending on the step user is on\n    const handleDisplayForm = (currentStep) => {\n        switch (currentStep) {\n            case 1:\n                return <StepOne handleRadioInputChange={handleRadioInputChange} />;\n            case 2:\n                return <StepTwo />;\n            case 3:\n                return <StepThree handleRadioInputChange={handleRadioInputChange} />;\n        \n            default:\n                return <StepOne handleRadioInputChange={handleRadioInputChange} />;\n        }\n    }\n\n    // handle continue button behaviour\n    const handleContinue = (values, actions) => {\n        if (activeStep !== formSteps.length) {\n            setActiveStep(activeStep + 1);\n            setCompletedSteps([...completedSteps, activeStep]);\n            actions.setTouched({});\n        // }\n        } else {\n            const finalData = {\n                ...values,\n                ...radioInputData,\n                abegHandle: values.abegHandle[0] === '@' ? values.abegHandle : '@' + values.abegHandle,\n                instagramHandle: values.instagramHandle[0] === '@' ? values.instagramHandle : '@' + values.instagramHandle,\n                twitterHandle: values.twitterHandle[0] === '@' ? values.twitterHandle : '@' + values.twitterHandle\n            }\n            console.log(finalData);\n            alert(JSON.stringify(finalData));\n            \n        }\n        \n    };\n\n    // handle switching to the appropriate schema to be used for validation depending on the step user is on\n    const selectValidationSchema = () => {\n        const validationArr = [{bvn: bvnSchema, acctnum: personalAcctNumSchema}, socialHandleSchema, businessCatSchema];\n        const position = activeStep - 1;\n\n        switch (activeStep) {\n            case 1:\n                if (radioInputData.verificationMethod === 'BVN') {\n                    return validationArr[position].bvn\n                } else{\n                    return validationArr[position].acctnum\n                }\n        \n            default:\n                return validationArr[position];\n        }\n    };\n\n    return (\n        <div>\n            <Formik\n                initialValues={{\n                    bvn: '',\n                    acctNum: '',\n                    bank: '',\n                    abegHandle: '',\n                    instagramHandle: '',\n                    twitterHandle: '',\n                    businessType: '',\n                    businessCategory: '',\n                }}\n                validationSchema={selectValidationSchema()}\n                onSubmit={handleContinue}\n            >\n                {({\n                    handleSubmit,\n                }) => {\n                    return(\n                        <OnboardingFrame \n                            activeStep={activeStep} \n                            changeActiveStep={setActiveStep}\n                            completedSteps={completedSteps}\n                            setCompletedSteps={setCompletedSteps}\n                            steps={formSteps}\n                            handleComplete={handleSubmit}\n                        >\n                            <Form>\n                                {handleDisplayForm(activeStep)}\n                            </Form>\n                        </OnboardingFrame>\n                    )\n                }}\n                    \n            </Formik>\n        </div>\n    )\n}\n\n\nexport default Onboarding;\n"]},"metadata":{},"sourceType":"module"}